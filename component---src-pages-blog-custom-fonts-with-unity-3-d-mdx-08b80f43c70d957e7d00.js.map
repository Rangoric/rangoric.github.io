{"version":3,"file":"component---src-pages-blog-custom-fonts-with-unity-3-d-mdx-08b80f43c70d957e7d00.js","mappings":"8QAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,QAAC,IAAD,CAAKC,MAAM,8EAA8ED,QAAQ,SACjG,4DACA,0KAA2J,sBAAYE,WAAW,KAAvB,cAA3J,kGACA,mDACA,uCACA,qEACA,mBACE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,QAApB,uCACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,QAApB,+BAAoG,sBAAYA,WAAW,MAAvB,OAApG,8BAAkL,aAAGA,WAAW,KAC5L,KAAQ,iFADsK,gDAGlL,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,QAApB,+BAAoG,sBAAYA,WAAW,MAAvB,OAApG,2GACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,SAApB,gGAAsK,sBAAYA,WAAW,MAAvB,QAAtK,yBAEF,kFACA,mBACE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,uBACpB,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,oBACpB,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,2BAEtB,mCAAqB,sBAAYA,WAAW,KAAvB,OAArB,uBAA2F,sBAAYA,WAAW,KAAvB,OAA3F,4GAAsP,sBAAYA,WAAW,KAAvB,OAAtP,qDAA0V,sBAAYA,WAAW,KAAvB,OAA1V,iDAA0b,sBAAYA,WAAW,KAAvB,OAA1b,WACA,gHACA,mBACE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,UAApB,QAA+E,sBAAYA,WAAW,MAAvB,cAA/E,QAA8I,sBAAYA,WAAW,MAAvB,mBAC9I,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,UAApB,QAA+E,sBAAYA,WAAW,MAAvB,cAA/E,QAA8I,sBAAYA,WAAW,MAAvB,qBAEhJ,yDAA2C,sBAAYA,WAAW,KAAvB,kBAA3C,gDAAqJ,sBAAYA,WAAW,KAAvB,OAArJ,oBAAwN,sBAAYA,WAAW,KAAvB,iBAAxN,iBAAkS,sBAAYA,WAAW,KAAvB,qBAAlS,SAAwW,sBAAYA,WAAW,KAAvB,iBAAxW,mBACA,8DAAgD,sBAAYA,WAAW,KAAvB,cAAhD,8CAAoJ,sBAAYA,WAAW,KAAvB,cAApJ,QAAkN,sBAAYA,WAAW,KAAvB,cAAlN,MACA,qDAAuC,sBAAYA,WAAW,KAAvB,kBAAvC,UAA2G,sBAAYA,WAAW,KAAvB,gBAA3G,yBAA4L,sBAAYA,WAAW,KAAvB,kBAA5L,6BAAmR,sBAAYA,WAAW,KAAvB,gBAAnR,YAAuV,sBAAYA,WAAW,KAAvB,QAAvV,oBACA,sDACA,6FACA,gCAAkB,sBAAYA,WAAW,KAAvB,OAAlB,kDACA,oBAAK,gBAAMA,WAAW,OAAjB,uGAKL,wEAA0D,sBAAYA,WAAW,KAAvB,gCAA1D,kNACA,gCACA,2EAA6D,sBAAYA,WAAW,KAAvB,cAA7D,0JAKJL,EAAWM,gBAAiB,G,qBC/Db,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://gatsby-starter-default/./src/pages/blog/custom-fonts-with-unity-3d.mdx","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport SEO from \"../../components/seo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <SEO title=\"Custom Fonts in Unity 3D's UI Toolkit - Wilson Gearld Mead III's Blog Posts\" mdxType=\"SEO\" />\n    <h1>{`Custom Fonts in Unity 3D's UI Toolkit`}</h1>\n    <p>{`You may be thinking \"Just read the documentation\" instead of reading another blog post on some random topic. Well, you're mostly right, but the new `}<inlineCode parentName=\"p\">{`UI Toolkit`}</inlineCode>{` package for Unity3D is a work in progress, so the documentation isn't all that great for it.`}</p>\n    <p>{`Also, I won't keep you long. `}</p>\n    <h2>{`What Do You Need`}</h2>\n    <p>{`The main file types we care about for this are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.ttf`}</inlineCode>{` file of the font you want to use.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.uss`}</inlineCode>{` file. These are basically `}<inlineCode parentName=\"li\">{`css`}</inlineCode>{` files, but more limited. `}<a parentName=\"li\" {...{\n          \"href\": \"https://forum.unity.com/threads/uss-and-uxml-support-in-visual-studio.663916/\"\n        }}>{`Click here read how to setup Visual Studio`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.tss`}</inlineCode>{` file. These are basically `}<inlineCode parentName=\"li\">{`css`}</inlineCode>{` files, but more limited. Yes same as above, and you can do the same thing to get them to \"work well\".`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.uxml`}</inlineCode>{` file. These are supported mostly out of the box, but you can do a bit of the above as with `}<inlineCode parentName=\"li\">{`.uss`}</inlineCode>{` files if you like.`}</li>\n    </ul>\n    <p>{`So for purposes of this example, I have the following files.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Alata-Regular.ttf`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`NewTSSFile.tss`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`NewUXMLTemplate.uxml`}</inlineCode></li>\n    </ul>\n    <p>{`I'm using the `}<inlineCode parentName=\"p\">{`tss`}</inlineCode>{` file instead of a `}<inlineCode parentName=\"p\">{`uss`}</inlineCode>{` file because they fill the same role, and I don't have enough to break it down just yet. If you want a `}<inlineCode parentName=\"p\">{`uss`}</inlineCode>{` file, then go ahead, and you will add it to the `}<inlineCode parentName=\"p\">{`tss`}</inlineCode>{` file in the Unity Inspector window for that `}<inlineCode parentName=\"p\">{`tss`}</inlineCode>{` file.`}</p>\n    <p>{`The other things you need are best made in Unity in the folder you have the above files in`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Create`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`UI Toolkit`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`Text Settings`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Create`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`UI Toolkit`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`Panel Settings`}</inlineCode></li>\n    </ul>\n    <p>{`Now in the Inspector window for the `}<inlineCode parentName=\"p\">{`Panel Settings`}</inlineCode>{` file you created, you will add your theme (`}<inlineCode parentName=\"p\">{`tss`}</inlineCode>{`) file and your `}<inlineCode parentName=\"p\">{`Text Settings`}</inlineCode>{` file as the `}<inlineCode parentName=\"p\">{`Theme Style Sheet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Text Settings`}</inlineCode>{` respectively.`}</p>\n    <p>{`Now in a Scene, add a gameobject of type `}<inlineCode parentName=\"p\">{`UIDocument`}</inlineCode>{` (Right Click the Scene game object area, `}<inlineCode parentName=\"p\">{`UI-Toolkit`}</inlineCode>{` -> `}<inlineCode parentName=\"p\">{`UIDocument`}</inlineCode>{`)`}</p>\n    <p>{`For this object, you can assign `}<inlineCode parentName=\"p\">{`Panel Settings`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`Source Asset`}</inlineCode>{`. You can assign the `}<inlineCode parentName=\"p\">{`Panel Settings`}</inlineCode>{` as you suspect, and the `}<inlineCode parentName=\"p\">{`Source Asset`}</inlineCode>{` is the `}<inlineCode parentName=\"p\">{`uxml`}</inlineCode>{` file you made.`}</p>\n    <h2>{`There's nothing about Fonts yet`}</h2>\n    <p>{`I know, this is all the stuff that has to be set up for things to work.`}</p>\n    <p>{`Now in the `}<inlineCode parentName=\"p\">{`tss`}</inlineCode>{` file, we can use that font and it will work.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VisualElement {\n    -unity-font-definition: none;\n    -unity-font: url(Alata-Regular.ttf);\n}\n`}</code></pre>\n    <p>{`This will force all elements to use that font. The `}<inlineCode parentName=\"p\">{`-unity-font-defintion: none;`}</inlineCode>{` will show as a console error and I'm still sorting that out, but it still clears whatever inherited value would be there, allowing the next line to work. Also, anytime I change the font, I need this line.`}</p>\n    <h2>{`That's it`}</h2>\n    <p>{`Yeap, that's all that's needed. I'm still sorting out `}<inlineCode parentName=\"p\">{`UI Toolkit`}</inlineCode>{` and how it works and what it means, but I'm normally a Web Developer, so I find it much easier to reason about than typical old school ui libraries.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","title","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}