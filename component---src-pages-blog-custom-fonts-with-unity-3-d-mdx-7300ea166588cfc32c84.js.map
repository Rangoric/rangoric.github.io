{"version":3,"file":"component---src-pages-blog-custom-fonts-with-unity-3-d-mdx-7300ea166588cfc32c84.js","mappings":"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","sources":["webpack://rangoric-blog-and-website/./src/pages/blog/custom-fonts-with-unity-3d.mdx","webpack://rangoric-blog-and-website/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport SEO from \"../../components/seo\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: \"Custom Fonts in Unity 3D's UI Toolkit - Wilson Gearld Mead III's Blog Posts\"\n  }), \"\\n\", React.createElement(_components.h1, null, \"Custom Fonts in Unity 3D's UI Toolkit\"), \"\\n\", React.createElement(_components.p, null, \"You may be thinking \\\"Just read the documentation\\\" instead of reading another blog post on some random topic. Well, you're mostly right, but the new \", React.createElement(_components.code, null, \"UI Toolkit\"), \" package for Unity3D is a work in progress, so the documentation isn't all that great for it.\"), \"\\n\", React.createElement(_components.p, null, \"Also, I won't keep you long.\"), \"\\n\", React.createElement(_components.h2, null, \"What Do You Need\"), \"\\n\", React.createElement(_components.p, null, \"The main file types we care about for this are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \".ttf\"), \" file of the font you want to use.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \".uss\"), \" file. These are basically \", React.createElement(_components.code, null, \"css\"), \" files, but more limited. \", React.createElement(_components.a, {\n    href: \"https://forum.unity.com/threads/uss-and-uxml-support-in-visual-studio.663916/\"\n  }, \"Click here read how to setup Visual Studio\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \".tss\"), \" file. These are basically \", React.createElement(_components.code, null, \"css\"), \" files, but more limited. Yes same as above, and you can do the same thing to get them to \\\"work well\\\".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \".uxml\"), \" file. These are supported mostly out of the box, but you can do a bit of the above as with \", React.createElement(_components.code, null, \".uss\"), \" files if you like.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"So for purposes of this example, I have the following files.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"Alata-Regular.ttf\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"NewTSSFile.tss\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"NewUXMLTemplate.uxml\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I'm using the \", React.createElement(_components.code, null, \"tss\"), \" file instead of a \", React.createElement(_components.code, null, \"uss\"), \" file because they fill the same role, and I don't have enough to break it down just yet. If you want a \", React.createElement(_components.code, null, \"uss\"), \" file, then go ahead, and you will add it to the \", React.createElement(_components.code, null, \"tss\"), \" file in the Unity Inspector window for that \", React.createElement(_components.code, null, \"tss\"), \" file.\"), \"\\n\", React.createElement(_components.p, null, \"The other things you need are best made in Unity in the folder you have the above files in\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"Create\"), \" -> \", React.createElement(_components.code, null, \"UI Toolkit\"), \" -> \", React.createElement(_components.code, null, \"Text Settings\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"Create\"), \" -> \", React.createElement(_components.code, null, \"UI Toolkit\"), \" -> \", React.createElement(_components.code, null, \"Panel Settings\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Now in the Inspector window for the \", React.createElement(_components.code, null, \"Panel Settings\"), \" file you created, you will add your theme (\", React.createElement(_components.code, null, \"tss\"), \") file and your \", React.createElement(_components.code, null, \"Text Settings\"), \" file as the \", React.createElement(_components.code, null, \"Theme Style Sheet\"), \" and \", React.createElement(_components.code, null, \"Text Settings\"), \" respectively.\"), \"\\n\", React.createElement(_components.p, null, \"Now in a Scene, add a gameobject of type \", React.createElement(_components.code, null, \"UIDocument\"), \" (Right Click the Scene game object area, \", React.createElement(_components.code, null, \"UI-Toolkit\"), \" -> \", React.createElement(_components.code, null, \"UIDocument\"), \")\"), \"\\n\", React.createElement(_components.p, null, \"For this object, you can assign \", React.createElement(_components.code, null, \"Panel Settings\"), \", and \", React.createElement(_components.code, null, \"Source Asset\"), \". You can assign the \", React.createElement(_components.code, null, \"Panel Settings\"), \" as you suspect, and the \", React.createElement(_components.code, null, \"Source Asset\"), \" is the \", React.createElement(_components.code, null, \"uxml\"), \" file you made.\"), \"\\n\", React.createElement(_components.h2, null, \"There's nothing about Fonts yet\"), \"\\n\", React.createElement(_components.p, null, \"I know, this is all the stuff that has to be set up for things to work.\"), \"\\n\", React.createElement(_components.p, null, \"Now in the \", React.createElement(_components.code, null, \"tss\"), \" file, we can use that font and it will work.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"VisualElement {\\n    -unity-font-definition: none;\\n    -unity-font: url(Alata-Regular.ttf);\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"This will force all elements to use that font. The \", React.createElement(_components.code, null, \"-unity-font-defintion: none;\"), \" will show as a console error and I'm still sorting that out, but it still clears whatever inherited value would be there, allowing the next line to work. Also, anytime I change the font, I need this line.\"), \"\\n\", React.createElement(_components.h2, null, \"That's it\"), \"\\n\", React.createElement(_components.p, null, \"Yeap, that's all that's needed. I'm still sorting out \", React.createElement(_components.code, null, \"UI Toolkit\"), \" and how it works and what it means, but I'm normally a Web Developer, so I find it much easier to reason about than typical old school ui libraries.\"), \"\\n\", React.createElement(_components.h2, null, \"Extras That I've noticed\"), \"\\n\", React.createElement(_components.p, null, \"Attaching fonts in the \", React.createElement(_components.code, null, \"tss\"), \" file will actually make sure it's in the build. So after everything above is done, a build just works. Also, there are other ways to deal with fonts, but I was looking for low impact, \", React.createElement(_components.code, null, \"css\"), \" like behaviour and it worked!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","h2","ul","li","a","pre","_provideComponents","components","React","SEO","title","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}