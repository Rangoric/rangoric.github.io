{"version":3,"file":"component---src-pages-magic-index-mdx-adf183bfc4dc123844df.js","mappings":"oLAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBC,EAAAA,EAAK,CACxEC,MAAO,yCACL,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6UAA8U,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6BAA8B,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,eAAgB,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,kLAAmL,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,UAAW,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mGAAoG,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,sBAAuB,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,kGAAmG,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4EAA6E,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,qCAAsC,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0LAA2L,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,yDAA0D,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oGAAqG,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,4BAA6B,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6KAA8K,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,sCAAuC,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gGAAiGK,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,OAAQ,KAAM,KAAMG,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,gCAAiC,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oJAAqJ,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,mBAAoB,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uPACpyF,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECeO,MAAMc,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,C","sources":["webpack://rangoric-blog-and-website/./src/pages/magic/index.mdx","webpack://rangoric-blog-and-website/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport SEO from \"../../components/seo\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: \"Wilson Gearld Mead III's Magic Decks\"\n  }), \"\\n\", React.createElement(_components.p, null, \"I generally play with in a couple of casual pods. One is family & friends, the other is friends. My decks tend to try and match their power level. But with the family & friends group it's hard, so while I have \\\"strong\\\" decks sometimes, I tend to run less interaction than they should have, or not the normal way you'd run them.\"), \"\\n\", React.createElement(_components.p, null, \"Some of my favorite decks\"), \"\\n\", React.createElement(_components.h2, null, \"Krarkashima\"), \"\\n\", React.createElement(_components.p, null, \"Focuses on coin flips and gambling and other things. It used to be more streamlined but it was hilarious fun, but very miss or hit & game over. So it's going the carny route.\"), \"\\n\", React.createElement(_components.h2, null, \"Omnath\"), \"\\n\", React.createElement(_components.p, null, \"Landfall! Done as an experiment with basically no interaction. Very strong, but hard to notice.\"), \"\\n\", React.createElement(_components.h2, null, \"Tamiyo's Book Club\"), \"\\n\", React.createElement(_components.p, null, \"I really like this idea, but with how Tamiyo done done in recent sets I'm having to rework it.\"), \"\\n\", React.createElement(_components.p, null, \"Trying hard to not be super friends, but it might just be super friends.\"), \"\\n\", React.createElement(_components.h2, null, \"Kenrith, it's good to be the king\"), \"\\n\", React.createElement(_components.p, null, \"Not competitive but royalty & rules changes. It has some stax, but things that literally change the rules of the game in some way are more interesting and where I want to go with it.\"), \"\\n\", React.createElement(_components.h2, null, \"Sliver Queen / The Ur-Dragon in the largest deck ever\"), \"\\n\", React.createElement(_components.p, null, \"Remember when commander decks gave you oversized versions of the commander? This deck remembers.\"), \"\\n\", React.createElement(_components.h2, null, \"Liesa - Lifegain & Taxes\"), \"\\n\", React.createElement(_components.p, null, \"Was a Church of Orzova deck, now a Liesa deck. Before it was too passive, this is more active but looking for better cards for its new theme. Tends to gain so much life.\"), \"\\n\", React.createElement(_components.h2, null, \"Jaya Ballard, Burn it with friends\"), \"\\n\", React.createElement(_components.p, null, \"Lifelink, deathtouch, protection from red, and industructible. All things Jaya doesn't have, \", React.createElement(_components.em, null, \"yet\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"Norin the Wary, Goblin Chaos\"), \"\\n\", React.createElement(_components.p, null, \"Norin is just fun to build. It could use a few other cards as the commander (Purphoros is an evil pick) but when this goes off it's just brutal.\"), \"\\n\", React.createElement(_components.h2, null, \"Gates & Shrines\"), \"\\n\", React.createElement(_components.p, null, \"All the shrines, and all the gates. The gates are actually rather useful (especially if you get out the gate that lets them all enter untapped), and also has an enchantress theme. One of my favorite decks to play, can build silly board states.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","em","_provideComponents","components","React","SEO","title","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}