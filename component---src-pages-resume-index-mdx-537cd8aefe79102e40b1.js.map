{"version":3,"file":"component---src-pages-resume-index-mdx-537cd8aefe79102e40b1.js","mappings":"oLAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBC,EAAAA,EAAK,CACxEC,MAAO,oCACL,KAAMF,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,oCAAqC,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,8IAA+I,KAAMM,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,gCAAiC,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,0NAA2N,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,2KAA4K,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,wIAAyI,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,2GAA4G,KAAMM,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,mDAAoD,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,+LAAgM,KAAMM,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,qBAAsB,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,mBAAoB,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,6BAA8B,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,6BAA8B,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,uBAAwB,MAAO,KAAMG,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,mCAAoC,KAAMK,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,uFAAwF,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,oGAAqG,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,oIAAqI,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,oDAAqD,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,gEAAiE,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,uGAAwG,MAC91F,CAKA,UAJA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWf,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECaO,MAAMgB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,C","sources":["webpack://rangoric-blog-and-website/./src/pages/resume/index.mdx","webpack://rangoric-blog-and-website/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport SEO from \"../../components/seo\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: \"Wilson Gearld Mead III's Resume\"\n  }), \"\\n\", React.createElement(_components.h1, null, \"Resume of Wilson Gearld Mead III\"), \"\\n\", React.createElement(_components.p, null, \"I have over 15 years of professional experience using applications and websites to solve problems and help people do what they need to do.\"), \"\\n\", React.createElement(_components.h2, null, \"Technologies I've Works With\"), \"\\n\", React.createElement(_components.p, null, \"In .Net land I've worked with the \\\"classic\\\" 4.x framework for services and websites, in addition to migrating many of them to .Net Core. I've done quite a bit also with Core, but I've been more Kotlin recently...\"), \"\\n\", React.createElement(_components.p, null, \"I've been working with JavaScript since before the year 2000, and changed over to TypeScript almost immediately, but use JavaScript or TypeScript based on the project.\"), \"\\n\", React.createElement(_components.p, null, \"Kotlin is a newfound joy to work with. While I have a couple of years experience with it now, I split time on Kotlin and TypeScript.\"), \"\\n\", React.createElement(_components.p, null, \"I've done some work in Ruby on Rails, but most of that is limited to dealing with a legacy application.\"), \"\\n\", React.createElement(_components.h2, null, \"Programming Languages I'm Already Proficient In\"), \"\\n\", React.createElement(_components.p, null, \"I've played with a multitude of languages, and done work in more. However, I am all for learning more languages. Haskell and OCaml in particular are on my list looking for a good project.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"C# - Expert Level\"), \"\\n\", React.createElement(_components.li, null, \"F# - Proficient\"), \"\\n\", React.createElement(_components.li, null, \"JavaScript - Expert Level\"), \"\\n\", React.createElement(_components.li, null, \"TypeScript - Expert Level\"), \"\\n\", React.createElement(_components.li, null, \"Kotlin - Proficient\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Assorted Developer Technologies\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Azure - Azure Functions mostly, but other management and application log management\"), \"\\n\", React.createElement(_components.li, null, \"GCS - Limited but I've been using it for almost 2 years for a kubernetes microservice deployment\"), \"\\n\", React.createElement(_components.li, null, \"Azure Devops - It's similar to Github Actions, especially the yaml configuration. I've used this and JIRA for project management\"), \"\\n\", React.createElement(_components.li, null, \"JIRA - Project Management and work item tracking\"), \"\\n\", React.createElement(_components.li, null, \"Github - This is deployed to Github Pages via Github Actions\"), \"\\n\", React.createElement(_components.li, null, \"Circle CI - Similiar to Github Actions & Azure Devops, allows continuous integration and deployment\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h2","ul","li","_provideComponents","components","React","SEO","title","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}